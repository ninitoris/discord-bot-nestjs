import { UserService } from './../../user/user.service';
import { MessageManager } from '@src/telegram-bot/message-manager/message-manager';
import {
  Action,
  Context,
  Hears,
  InjectBot,
  Wizard,
  WizardStep,
} from 'nestjs-telegraf';
import { Markup, Scenes, Telegraf } from 'telegraf';
import { RegisterWizardContext } from '../types/telegram-bot-types';
import { GitLabApiService } from '../../gitlab-api/gitlab-api.service';
import { StartMenuMarkup, StartMenuText } from '../telegram-bot.constants';
import { UtilsService } from '../../utils/utils.service';
import { ConfigService } from '@nestjs/config';

enum Steps {
  greeting = 0, // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  inputLink = 1, // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ç–ª–∞–±
  selectName = 2, // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
  editName = 3, // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  selectOrganization = 4, // –í—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏–ø–æ –∫–Ω–æ–ø–∫–µ (–∏–ø–∫, –∫–ª–∏–∫)
  selectDiscord = 5, // –í–≤–µ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –¥–∏—Å–∫–æ—Ä–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  inputDiscord = 6, // –í–≤–æ–¥ —é–∑–µ—Ä–Ω–µ–π–º–∞ –¥–∏—Å–æ–∫—Ä–¥–∞
  selectSex = 7, // –í—ã–±–æ—Ä –ø–æ–ª–∞
  confirmation = 8, // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
}

@Wizard('registerUser')
export class RegisterWizard {
  constructor(
    private readonly mm: MessageManager,
    private readonly gitlabApi: GitLabApiService,
    private readonly userService: UserService,
    private readonly utilsService: UtilsService,
    private readonly configService: ConfigService,
    @InjectBot() private readonly bot: Telegraf,
  ) {}

  backButton = [Markup.button.callback('üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', 'quit')];
  goBackButton = Markup.inlineKeyboard([this.backButton]);

  @WizardStep(Steps.greeting)
  protected async greeting(@Context() ctx: Scenes.WizardContext) {
    const msgText =
      '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç';

    const msgButtons = Markup.inlineKeyboard([
      [Markup.button.callback('ü¶ä –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ç–ª–∞–±', 'enterGitlab')],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, msgButtons);
  }

  @Action('enterGitlab')
  protected async enterGitlab(@Context() ctx: RegisterWizardContext) {
    await this.mm.msg(
      ctx,
      'ü¶ä –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ç–ª–∞–± –∞–∫–∫–∞—É–Ω—Ç',
      this.goBackButton,
    );

    ctx.wizard.selectStep(Steps.inputLink);
  }

  @WizardStep(Steps.inputLink)
  protected async inputLink(@Context() ctx: RegisterWizardContext) {
    if (!('message' in ctx.update && 'text' in ctx.update.message)) {
      return;
    }
    await this.mm.userSentSomething(ctx);
    const userInput = ctx.update.message.text;
    const username = getUsername(userInput);
    if (!username) {
      await this.mm.msg(
        ctx,
        `ü´† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`,
        this.goBackButton,
      );
      ctx.wizard.selectStep(Steps.inputLink);
      return;
    }

    const userInfo = await this.gitlabApi.getUserInfo(username);
    if (!userInfo) {
      await this.mm.msg(
        ctx,
        `ü´† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`,
        this.goBackButton,
      );
      ctx.wizard.selectStep(Steps.inputLink);
      return;
    }
    if (userInfo.username) {
      ctx.session.userInfo = userInfo;
      ctx.wizard.selectStep(Steps.selectName);
      await this.selectName(ctx);
    }
  }

  @WizardStep(Steps.selectName)
  protected async selectName(@Context() ctx: RegisterWizardContext) {
    const name = ctx.session.name ?? ctx.session.userInfo.name;
    const validName = validateAndFormatName(name);
    if (!validName) {
      const msgText = `üë§ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n‚ùå ${name}`;
      const msgButtons = Markup.inlineKeyboard([
        [Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'nameIsWrong')],
        this.backButton,
      ]);
      return await this.mm.msg(ctx, msgText, msgButtons);
    }
    const msgText = `üë§ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –≤–µ—Ä–Ω—ã–µ?\n${name}`;

    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', 'nameIsRight'),
        Markup.button.callback('üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', 'nameIsWrong'),
      ],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, msgButtons);
  }

  @Action('nameIsRight')
  protected async nameIsRight(@Context() ctx: RegisterWizardContext) {
    ctx.wizard.selectStep(Steps.selectOrganization);
    await this.selectOrganization(ctx);
  }

  @Action('nameIsWrong')
  protected async nameIsWrong(@Context() ctx: RegisterWizardContext) {
    await this.mm.msg(
      ctx,
      'üëÄ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–µ –ò–º—è –§–∞–º–∏–ª–∏—è',
      this.goBackButton,
    );

    ctx.wizard.selectStep(Steps.editName);
    await this.editName(ctx);
  }

  @WizardStep(Steps.editName)
  protected async editName(@Context() ctx: RegisterWizardContext) {
    if (!('message' in ctx.update && 'text' in ctx.update.message)) {
      return;
    }
    const invalidNameMsg = `ü´† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
    await this.mm.userSentSomething(ctx);
    const name = ctx.update.message.text;

    if (typeof name !== 'string') {
      await this.mm.msg(ctx, invalidNameMsg, this.goBackButton);
      ctx.wizard.selectStep(Steps.editName);
      return;
    }

    const formattedName = validateAndFormatName(name);
    if (!formattedName) {
      await this.mm.msg(ctx, invalidNameMsg, this.goBackButton);
      ctx.wizard.selectStep(Steps.editName);
      return;
    }

    ctx.session.name = formattedName;
    ctx.wizard.selectStep(Steps.editName);
    await this.selectName(ctx);
  }

  @WizardStep(Steps.selectOrganization)
  protected async selectOrganization(@Context() ctx: RegisterWizardContext) {
    const msgText = `üè≠ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é`;

    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('–ò–Ω—Ç–µ—Ä–ø—Ä–æ–∫–æ–º', 'orgIsInterprocom'),
        Markup.button.callback('–ö–ª–∏–∫', 'orgIsClick'),
      ],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, msgButtons);
  }

  @Action('orgIsInterprocom')
  protected async orgIsInterprocom(@Context() ctx: RegisterWizardContext) {
    ctx.session.orgID = '–ò–Ω—Ç–µ—Ä–ø—Ä–æ–∫–æ–º';
    ctx.wizard.selectStep(Steps.selectDiscord);
    await this.selectDiscord(ctx);
  }

  @Action('orgIsClick')
  protected async orgIsClick(@Context() ctx: RegisterWizardContext) {
    ctx.session.orgID = '–ö–ª–∏–∫';
    ctx.wizard.selectStep(Steps.selectDiscord);
    await this.selectDiscord(ctx);
  }

  @WizardStep(Steps.selectDiscord)
  protected async selectDiscord(@Context() ctx: RegisterWizardContext) {
    const msgText = `üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∏—Å–∫–æ—Ä–¥?`;

    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –î–∞', 'useDiscord'),
        Markup.button.callback('‚ùå –ù–µ—Ç', 'dontUseDiscord'),
      ],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, msgButtons);
  }

  @Action('useDiscord')
  protected async useDiscord(@Context() ctx: RegisterWizardContext) {
    await this.mm.msg(ctx, 'üëÄ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–π–¥–∏ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ (–Ω–µ –∏–º—è)');

    ctx.wizard.selectStep(Steps.inputDiscord);
    await this.inputDiscord(ctx);
  }

  @Action('dontUseDiscord')
  protected async dontUseDiscord(@Context() ctx: RegisterWizardContext) {
    ctx.session.orgID = '–ö–ª–∏–∫';
    ctx.wizard.selectStep(Steps.selectSex);
    await this.selectSex(ctx);
  }

  @WizardStep(Steps.inputDiscord)
  protected async inputDiscord(@Context() ctx: RegisterWizardContext) {
    if (!('message' in ctx.update && 'text' in ctx.update.message)) {
      return;
    }

    const invalidNameMsg = `ü´† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
    await this.mm.userSentSomething(ctx);
    const discordName = ctx.update.message.text;

    if (typeof discordName !== 'string') {
      await this.mm.msg(ctx, invalidNameMsg, this.goBackButton);
      ctx.wizard.selectStep(Steps.inputDiscord);
      return;
    }

    const validName = isValidDiscordUsername(discordName);
    if (!validName) {
      await this.mm.msg(ctx, invalidNameMsg, this.goBackButton);
      ctx.wizard.selectStep(Steps.inputDiscord);
      return;
    }

    ctx.session.discordName = discordName;
    ctx.wizard.selectStep(Steps.selectSex);
    await this.selectSex(ctx);
  }

  @WizardStep(Steps.selectSex)
  protected async selectSex(@Context() ctx: RegisterWizardContext) {
    const msgText = `ü´µ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª`;

    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚öΩÔ∏è –ú—É–∂—á–∏–Ω–∞', 'male'),
        Markup.button.callback('üôç‚Äç‚ôÄÔ∏è –î–µ–≤—É—à–∫–∞', 'female'),
      ],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, msgButtons);
  }

  @Action('male')
  protected async male(@Context() ctx: RegisterWizardContext) {
    ctx.session.female = false;
    ctx.wizard.selectStep(Steps.confirmation);
    await this.confirmation(ctx);
  }

  @Action('female')
  protected async female(@Context() ctx: RegisterWizardContext) {
    ctx.session.female = true;
    ctx.wizard.selectStep(Steps.confirmation);
    await this.confirmation(ctx);
  }

  @WizardStep(Steps.confirmation)
  protected async confirmation(@Context() ctx: RegisterWizardContext) {
    const session = ctx.session;

    const msgText = `üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π\nü¶ä –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:\n${this.utilsService.escapeMarkdown(session.userInfo.web_url)}\n\nüë§ –ò–º—è:\n${this.utilsService.escapeMarkdown(session?.userInfo?.name)}\n\nüè≠ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\n${this.utilsService.escapeMarkdown(session?.orgID)}\n\nü´µ –ü–æ–ª:\n${session.female ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}\n\nüîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∏—Å–∫–æ—Ä–¥–µ:\n${session.discordName ? `–î–∞, –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${this.utilsService.escapeMarkdown(session.discordName)}` : '–ù–µ—Ç'}`;

    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('–í—Å–µ –≤–µ—Ä–Ω–æ', 'confirm'),
        Markup.button.callback('–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞', 'startOver'),
      ],
      this.backButton,
    ]);

    await this.mm.msg(ctx, msgText, {
      parse_mode: 'MarkdownV2',
      link_preview_options: { is_disabled: true },
      reply_markup: msgButtons.reply_markup,
    });
  }

  /**–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –¥—Ä—É–≥–æ–π —á–∞—Ç*/
  @Action('confirm')
  protected async confirm(@Context() ctx: RegisterWizardContext) {
    const chatId = this.configService.get<number>('CHAT_ID');
    const session = ctx.session;
    const messageText = `üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\nü¶ä –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:\n${session.userInfo.web_url}\n\nüë§ –ò–º—è:\n${session?.name}\n\nüè≠ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\n${session?.orgID}\n\nü´µ –ü–æ–ª:\n${session.female ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}\n\nüîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∏—Å–∫–æ—Ä–¥–µ:\n${session.discordName ? `–î–∞, –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${session.discordName}` : '–ù–µ—Ç'}`;
    const msgButtons = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'approve'),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'reject'),
      ],
    ]);

    await this.mm.msg(ctx, '‚úÖ –ê–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', StartMenuMarkup);
    await ctx.scene.leave();

    const registerData = {
      gitlabName: session.userInfo.username,
      name: session.name,
      telegramID: ctx.chat.id ?? null,
      telegramUsername: ctx.chat.username ?? null,
      orgID: session.orgID ?? null,
      discordName: session.discordName ?? null,
      female: session.female ?? false,
      userInfo: session.userInfo,
    };

    await this.mm.sendMsgInChat(chatId, messageText, msgButtons);

    this.bot.action('approve', async (ctx) => {
      const newUser = await this.userService.createUser(registerData);
      if (!newUser) {
        return await this.mm.msg(ctx, 'üíÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      await this.mm.sendMsgInChat(
        registerData.telegramID,
        'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
      );

      return await this.mm.msg(ctx, 'üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    });

    this.bot.action('reject', async (ctx) => {
      await this.mm.sendMsgInChat(
        registerData.telegramID,
        'üôÖ‚Äç‚ôÇÔ∏è –í–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      );
      return await this.mm.msg(ctx, 'üôÖ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    });
  }

  /**–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞*/
  @Action('startOver')
  protected async startOver(@Context() ctx: RegisterWizardContext) {
    ctx.wizard.selectStep(Steps.greeting);
    await this.greeting(ctx);
  }

  /**–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é*/
  @Action('quit')
  protected async quit(@Context() ctx: RegisterWizardContext) {
    await ctx.scene.leave();
    await this.mm.msg(ctx, StartMenuText, StartMenuMarkup);
  }

  /**–£–¥–∞–ª–∏—Ç—å –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —à–∞–≥ —Ä–∞–≤–µ–Ω —à–∞–≥—É –≤ –∫–æ—Ç–æ—Ä–æ–º —é–∑–µ—Ä –¥–æ–ª–∂–µ–Ω —á—Ç–æ-—Ç–æ –≤–≤–µ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —à–∞–≥–∞*/
  @Hears(/.*/)
  protected async onAnyText(@Context() ctx: RegisterWizardContext) {
    if (
      ctx.wizard.cursor !== Steps.inputLink &&
      ctx.wizard.cursor !== Steps.editName &&
      ctx.wizard.cursor !== Steps.inputDiscord
    ) {
      await ctx.deleteMessage();
    }

    switch (ctx.wizard.cursor) {
      case Steps.inputLink:
        await this.inputLink(ctx);
        break;
      case Steps.editName:
        await this.editName(ctx);
        break;
      case Steps.inputDiscord:
        await this.inputDiscord(ctx);
        break;
    }
  }
}

/**–í–æ–∑–≤–∞—Ä–∞—â–∞–µ—Ç –≥–∏—Ç–ª–∞–± —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å—Å—ã–ª–∫–∏*/
const getUsername = (url: string): string | null => {
  const baseGitlabUrl = 'https://gitlab.interprocom.ru/';
  const username = url.startsWith(baseGitlabUrl)
    ? url.slice(baseGitlabUrl.length)
    : null;

  return username ? username : null;
};

/**–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å*/
const validateAndFormatName = (input: string): string | null => {
  const namePattern = /^[–∞-—è—ë]+\s[–∞-—è—ë]+$/i;
  const trimmedInput = input.trim().toLowerCase();

  if (namePattern.test(trimmedInput)) {
    const [firstName, lastName] = trimmedInput.split(' ');
    const formattedName = `${capitalize(firstName)} ${capitalize(lastName)}`;

    return formattedName;
  }

  return null;
};

/**–î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏*/
const capitalize = (word: string): string => {
  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
};

/**–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏—Å–∫–æ—Ä–¥ —é–∑–µ—Ä–Ω–µ–π–º–∞*/
const isValidDiscordUsername = (username: string): boolean => {
  const discordPattern = /^[a-zA-Z–∞-—è—ë–ê-–Ø–Å0-9._-]{2,32}$/;

  return discordPattern.test(username);
};
