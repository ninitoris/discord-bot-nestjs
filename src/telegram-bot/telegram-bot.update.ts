import { Logger } from '@nestjs/common';
import { Action, Ctx, Hears, Start, Update } from 'nestjs-telegraf';
import { Context, Markup } from 'telegraf';
import { UserService } from '../user/user.service';
import { GitLabApiService } from '../gitlab-api/gitlab-api.service';

const chatId = '-1002035561069';
// –û–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ "–æ—á–µ—Ä–µ–¥—å" –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
const userStates: Record<number, string | null> = {};

@Update()
export class TelegramBotUpdate {
  constructor(
    private readonly userService: UserService,
    private readonly gitlabApi: GitLabApiService,
  ) {}

  @Start()
  async start(@Ctx() ctx: Context) {
    if (ctx.chat.type === 'private') {
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å GitLab ü¶ä');
    }
  }

  @Hears(/https:\/\/gitlab\.interprocom\.ru\/([a-zA-Z0-9_-]+)/)
  async hears(@Ctx() ctx: Context) {
    // –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–Ω–µ Context –ø–ª–æ—Ö–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∫–æ—Å—Ç—ã–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    if (!('text' in ctx.message)) {
      Logger.log(ctx.message);
      return;
    }

    const userTgId = ctx.from?.id;
    const userTgName = ctx.from?.username;
    const url = ctx.message.text;
    const username = url?.match(/\/([^\/]+)$/)?.[1].toLowerCase();

    if (userStates[userTgId]) {
      await ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–≥–∏–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –¥–æ–±–∞–≤–µ–Ω –ª–∏ gitlab –∞–∫–∫–∞—É–Ω—Ç
    // const gitlbabUser = await this.userService.findByGitlabName(username);
    // if (gitlbabUser) {
    //   await ctx.reply('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.');
    //   return;
    // }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –¥–æ–±–∞–≤–ª—è–ª –ª–∏ –¥–∞–Ω–Ω—ã–π —Ç–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å gitlab –∞–∫–∫–∞—É–Ω—Ç
    // const tgUser = await this.userService.findByTgID(userTgId);
    // if (tgUser) {
    //   await ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–≥–∏–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
    //   return;
    // }

    if (userTgId && !userStates[userTgId]) {
      userStates[userTgId] = username;
      const userInfo = await this.gitlabApi.getUserInfo(username);
      const messageToGroup = `\n–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:
      \n‚öΩÔ∏è <a href="tg://user?id=${userTgId}">${userTgName ? `@${userTgName}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</a>
      \nü¶ä ${url}
      \nüë§ ${userInfo?.name}
      \nü¶´ –ú—É–∂—á–∏–Ω–∞
      \nüè≠ –ò–Ω—Ç–µ—Ä–ø—Ä–æ–∫–æ–º
      `;

      await ctx.telegram.sendMessage(chatId, messageToGroup, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_${userTgId}`)],
          [
            Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `approve_${userTgId}`),
            Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å', `reject_${userTgId}`),
          ],
        ]),
      });

      await ctx.reply('–í–∞—à –ª–æ–≥–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
    }
  }

  @Action(/approve_(\d+)/)
  async approveAction(@Ctx() ctx: Context) {
    if (!('match' in ctx)) {
      Logger.log('Match –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const match = ctx.match as RegExpExecArray;
    const userId = Number(match[1]);
    const username = userStates[userId];

    if (username) {
      await this.userService.createUser({
        gitlabName: username,
        telegramID: userId,
      });

      await ctx.telegram.sendMessage(
        userId,
        `–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω.\n–ì—Ä—É–ø–ø–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: https://t.me/+QIVMC3S7UqYwNGYy`,
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
      await ctx.sendMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`);

      delete userStates[userId];
    }
  }

  @Action(/reject_(\d+)/)
  async rejectAction(@Ctx() ctx: Context) {
    if (!('match' in ctx)) {
      Logger.log('Match –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    const match = ctx.match as RegExpExecArray;
    const userId = Number(match[1]);
    const userLogin = userStates[userId];

    if (userLogin) {
      await ctx.telegram.sendMessage(userId, `–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ª–æ–≥–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.`);
      // TODO –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–µ–∫–ª–∏—Å—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
      await ctx.sendMessage(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);

      delete userStates[userId];
    }
  }

  @Action(/edit_(\d+)/)
  async editAction(@Ctx() ctx: Context) {
    if (!('match' in ctx)) {
      Logger.log('Match –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const match = ctx.match as RegExpExecArray;
    const userId = Number(match[1]);

    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [
          Markup.button.callback('üë§ –ò–º—è', `update_name_${userId}`),
          Markup.button.callback('ü¶´ –ü–æ–ª', `update_gender_${userId}`),
          Markup.button.callback('üè≠ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', `update_org_${userId}`),
        ],
      ],
    });
  }
}
