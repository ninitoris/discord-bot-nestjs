import { Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ENVIRONMENT_KEY } from '@src/constants/env-keys';
import { MessageManager } from '@src/telegram-bot/message-manager/message-manager';
import {
  NavigationButtons,
  StartMenuText,
} from '@src/telegram-bot/telegram-bot.menu';
import { CustomContext } from '@src/telegram-bot/types/telegram-bot-types';
import { Users } from '@src/user/entities/users.entity';
import { UserService } from '@src/user/user.service';
import { Action, Command, Ctx, Hears, Start, Update } from 'nestjs-telegraf';
import { Context, Scenes } from 'telegraf';
import { ExtraEditMessageText } from 'telegraf/typings/telegram-types';
import * as tg from 'telegraf/types';
import { TelegramBotUtils } from './utils/telegram-bot.utils';

@Update()
export class TelegramBotUpdate {
  constructor(
    private readonly mm: MessageManager,
    private readonly userService: UserService,
    private readonly configService: ConfigService,
    private readonly telegramBotUtils: TelegramBotUtils,
  ) {}

  @Start()
  async start(@Ctx() ctx: Context) {
    await this.mm.userSentSomething(ctx);
    console.dir(ctx, { depth: Infinity });
    const startMenu = await this.telegramBotUtils.getStartMenu(
      (ctx.update as tg.Update.MessageUpdate).message.from.id,
    );
    console.log('startMenu:', startMenu);
    await this.mm.sendNewMessage(ctx, StartMenuText, startMenu);
    this.mm.cleanUpChat(ctx.chat.id);
  }

  @Action('notifications')
  @Hears(NavigationButtons.notificationsConfig)
  @Command('notifications')
  async notificationsSetup(ctx: Scenes.WizardContext) {
    // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–∫–µ. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ —Å—Ü–µ–Ω—É
    await ctx.scene.enter('notificationsSetup');
  }

  @Action('registerUser')
  @Hears(NavigationButtons.regiseter)
  @Command('registerUser')
  async regiseterUser(ctx: Scenes.WizardContext) {
    await ctx.scene.enter('registerUser');
  }

  @Action('approveUser')
  async approveUserHandler(@Ctx() ctx: CustomContext) {
    if ('callback_query' in ctx.update) {
      const cbq = ctx.update.callback_query;
      const msgID = cbq.message.message_id;
      const rr =
        await this.userService.getRegistrationRequestByMessageID(msgID);

      // —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞—è–≤–∫–∏
      const newUser = new Users();
      newUser.name = rr.name;
      newUser.female = rr.female || false;
      newUser.orgID = rr.orgID;
      newUser.gitlabID = rr.gitlabID;
      newUser.gitlabName = rr.gitlabName;
      newUser.discordID = rr.discordName;
      newUser.telegramID = rr.telegramID;
      newUser.telegramUsername = rr.telegramUsername;
      const createdBy = cbq.from.username;
      newUser.createdBy = createdBy;
      console.log('cbq.message.date', cbq.message.date);
      newUser.createdAt = new Date(cbq.message.date * 1000);
      console.log('newUser.createdAt', newUser.createdAt);
      newUser.updatedAt = newUser.createdAt;

      await this.userService.saveUser(newUser);

      rr.status = 'ACCEPTED';
      await this.userService.saveRegistrationRequest(rr);

      // –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
      const chatId = this.configService.get<number>('CHAT_ID');

      const baseHost = this.configService.get(ENVIRONMENT_KEY.GITLAB_BASE_HOST);
      const userProfileLink = baseHost + rr.gitlabName;

      const messageText = `üëÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n\nü¶ä –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç:\n${userProfileLink}\n\nüë§ –ò–º—è:\n${rr.name}\n\nüì± –¢–µ–ª–µ–≥–∞:\n@${rr.telegramUsername}\n\nüé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\n${rr.orgID}\n\nü´µ –ü–æ–ª:\n${rr.female ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}\n\nüîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–∏—Å–∫–æ—Ä–¥–µ:\n${rr.discordName ? `–î–∞, –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${rr.discordName}` : '–ù–µ—Ç'}\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: @${createdBy}`;

      const extra: ExtraEditMessageText = {
        link_preview_options: {
          is_disabled: true, // –≤—ã–∫–ª—é—á–∏–ª –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ gitlab.interprocom.ru —É –Ω–∞—Å –≤—ã–≥–ª—è–¥—è—Ç –Ω–µ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ
        },
      };
      await this.mm.editMessage(chatId, msgID, messageText, extra);

      const telegramID = Number(newUser.telegramID);
      // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
      const startMenu = await this.telegramBotUtils.getStartMenu(telegramID);
      await this.mm.sendNewMessage(
        telegramID,
        'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
        startMenu,
      );
      await this.mm.cleanUpChat(telegramID);
    } else {
      Logger.error(
        'approveUser action triggered, but callback_query is not present in ctx.update:',
      );
      console.dir(ctx, { depth: Infinity });
    }
    return;
  }

  @Action('rejectUser')
  async rejectUserHandler(@Ctx() ctx: CustomContext) {
    console.dir(ctx, { depth: Infinity });
    // await this.mm.sendMsgInChat(
    //   registerData.telegramID,
    //   'üôÖ‚Äç‚ôÇÔ∏è –í–∞–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    // );

    // clearRegisterData(registerData);
    return await this.mm.msg(ctx, 'üôÖ‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  }

  @Hears(/.*/)
  protected async onAnyText(@Ctx() ctx: CustomContext) {
    await this.mm.userSentSomething(ctx);
  }
}
