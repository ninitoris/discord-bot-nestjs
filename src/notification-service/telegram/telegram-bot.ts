import { Markup, type Context } from 'telegraf';
import type { GeneralNotificationType } from '../notification-strategy';
import axios from 'axios';
import { Action, Ctx, Hears, Start, Update } from 'nestjs-telegraf';

const chatId = '-1002035561069';
const userStates: Record<number, string | null> = {};

@Update()
export class AppUpdate {
  @Start()
  async start(@Ctx() ctx: Context) {
    if (ctx.chat.type === 'private') {
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å GitLab ü¶ä');
    }
  }

  @Hears(/https:\/\/gitlab\.interprocom\.ru\/([a-zA-Z0-9_-]+)/)
  async hears(@Ctx() ctx: Context) {
    const userId = ctx.from?.id;
    const userName = ctx.from?.username;
    // const url = ctx.message?.text;
    const url = 'ctx.message'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    if (userStates[userId]) {
      await ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–≥–∏–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
      return;
    }

    if (userId && !userStates[userId]) {
      userStates[userId] = url; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç

      const messageToGroup = `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:\nüë§ <a href="tg://user?id=${userId}">${userName ? `@${userName}` : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</a>\nü¶ä ${url}\n`;

      await ctx.telegram.sendMessage(chatId, messageToGroup, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [
            Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `approve_${userId}`),
            Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å', `reject_${userId}`),
          ],
        ]),
      });

      await ctx.reply('–í–∞—à –ª–æ–≥–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.');
    }
  }

  @Action(/approve_(\d+)/)
  async approveAction(@Ctx() ctx: Context) {
    const userId = 1;
    // const userId = Number(ctx.match[1]);
    const userLogin = userStates[userId];

    if (userLogin) {
      axios.get('name');

      await ctx.telegram.sendMessage(
        userId,
        `–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω.\n–ì—Ä—É–ø–ø–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: https://t.me/+QIVMC3S7UqYwNGYy`,
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
      await ctx.editMessageText(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`);

      delete userStates[userId];
    }
  }

  @Action(/reject_(\d+)/)
  async rejectAction(@Ctx() ctx: Context) {
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    // const userId = Number(ctx.match[1]);
    const userId = 2;
    const userLogin = userStates[userId];

    if (userLogin) {
      await ctx.telegram.sendMessage(userId, `–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –ª–æ–≥–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.`);
      // TODO –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–ª–µ–∫–ª–∏—Å—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
      await ctx.editMessageText(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);

      delete userStates[userId];
    }
  }
}

export function sendMessage(options: GeneralNotificationType) {
  return options;
}
